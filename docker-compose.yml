volumes:
  db_data:
    driver: local
  moodle_data:
    driver: local
  orderer.example.com:
  peer0.org1.example.com:
  peer0.org2.example.com:

networks:
  moodle_network:
    driver: bridge
  fabric_network:
    driver: bridge
  acapy_network:
    driver: bridge
  # Red para el proxy inverso de Dokploy (Traefik)
  dokploy-network:
    external: true
  # Red creada por VON Network (externa)
  von_von:
    external: true

services:
  # ===================================================================
  # Servicio ACA-Py Agent
  # ===================================================================
  acapy-agent:
    build:
      context: ./backend/acapy
      dockerfile: Dockerfile.acapy
    container_name: acapy-agent
    environment:
      - GENESIS_URL=${ACAPY_GENESIS_URL}
      - ACAPY_DID_SEED=${ACAPY_DID_SEED}
      - ACAPY_ENDPOINT=https://${ACAPY_DOMAIN}
      - ACAPY_WALLET_NAME=${ACAPY_WALLET_NAME}
      - ACAPY_WALLET_KEY=${ACAPY_WALLET_KEY}
    entrypoint: aca-py
    command:
      - start
      - --auto-provision
      - --seed
      - ${ACAPY_DID_SEED}
      - --admin
      - "0.0.0.0"
      - "8020"
      - --admin-insecure-mode
      - --endpoint
      - ${ACAPY_ENDPOINT}
      - --inbound-transport
      - http
      - "0.0.0.0"
      - "8021"
      - --outbound-transport
      - http
      - --genesis-url
      - ${ACAPY_GENESIS_URL}
      - --wallet-type
      - askar
      - --wallet-name
      - ${ACAPY_WALLET_NAME}
      - --wallet-key
      - ${ACAPY_WALLET_KEY}
      - --log-level
      - INFO
      - --auto-accept-requests
      - --auto-accept-invites
      - --auto-ping-connection
    networks:
      - acapy_network
      - dokploy-network
      - von_von  # Conectar a la red de VON Network externa
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/status/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.acapy-public.rule=Host(`${ACAPY_DOMAIN}`)"
      - "traefik.http.routers.acapy-public.entrypoints=websecure"
      - "traefik.http.routers.acapy-public.tls.certresolver=myresolver"
      - "traefik.http.services.acapy-public.loadbalancer.server.port=8021"
      - "traefik.http.routers.acapy-admin.rule=Host(`${ACAPY_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.acapy-admin.entrypoints=websecure"
      - "traefik.http.routers.acapy-admin.tls.certresolver=myresolver"
      - "traefik.http.services.acapy-admin.loadbalancer.server.port=8020"

  # ===================================================================
  # Controller Python
  # ===================================================================
  python-controller:
    build:
      context: ./backend
      dockerfile: Dockerfile.controller
    container_name: python-controller
    # El puerto se expone a través de Traefik
    environment:
      - ISSUER_URL=${ISSUER_URL}
      - ACAPY_ADMIN_URL=http://acapy-agent:8020
      - ACAPY_PUBLIC_URL=https://${ACAPY_DOMAIN} # El endpoint público del agente
      - FABRIC_NETWORK_PATH=/crypto-config
      - OPENID_PRIVATE_KEY_PATH=/run/secrets/openid_private_key
      - OPENID_PUBLIC_KEY_PATH=/run/secrets/openid_public_key
    volumes:
      - ${CRYPTO_CONFIG_PATH}:/crypto-config:ro
      - ${OPENID_PRIVATE_KEY_PATH}:/run/secrets/openid_private_key:ro
      - ${OPENID_PUBLIC_KEY_PATH}:/run/secrets/openid_public_key:ro
    depends_on:
      acapy-agent:
        condition: service_healthy
    networks:
      - moodle_network
      - fabric_network
      - acapy_network
      - dokploy-network # Conectar a la red del proxy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.controller.rule=Host(`${CONTROLLER_DOMAIN}`)"
      - "traefik.http.routers.controller.entrypoints=websecure"
      - "traefik.http.routers.controller.tls.certresolver=myresolver" # Dokploy gestiona esto
      - "traefik.http.services.controller.loadbalancer.server.port=3000"

  # ===================================================================
  # Aplicación Moodle
  # ===================================================================
  moodle-app:
    build:
      context: ./moodle
      dockerfile: Dockerfile
    container_name: moodle-app
    # El puerto se expone a través de Traefik
    environment:
      MOODLE_DB_TYPE: pgsql
      MOODLE_DB_HOST: moodle-db
      MOODLE_DB_PORT: 5432
      MOODLE_DB_NAME: ${MOODLE_DB_NAME}
      MOODLE_DB_USER: ${MOODLE_DB_USER}
      MOODLE_DB_PASS: ${MOODLE_DB_PASSWORD}
    volumes:
      - moodle_data:/var/www/moodledata
      - ./moodle/moodle-plugin/credenciales:/var/www/html/blocks/credenciales
    depends_on:
      - moodle-db
    networks:
      - moodle_network
      - dokploy-network # Conectar a la red del proxy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.moodle.rule=Host(`${MOODLE_DOMAIN}`)"
      - "traefik.http.routers.moodle.entrypoints=websecure"
      - "traefik.http.routers.moodle.tls.certresolver=myresolver" # Dokploy gestiona esto
      - "traefik.http.services.moodle.loadbalancer.server.port=80"

  # ===================================================================
  # Base de datos de Moodle
  # ===================================================================
  moodle-db:
    image: postgres:15-alpine
    container_name: moodle-db
    environment:
      POSTGRES_DB: ${MOODLE_DB_NAME}
      POSTGRES_USER: ${MOODLE_DB_USER}
      POSTGRES_PASSWORD: ${MOODLE_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --lc-collate=C --lc-ctype=C'
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - moodle_network
    restart: unless-stopped
    # Exponer el puerto de la BD de forma configurable para depuración.
    # En producción, considera no exponerlo a internet.
    ports:
      - "${MOODLE_DB_PORT_EXT}:5432"

  # ===================================================================
  # Servicios de Hyperledger Fabric
  # ===================================================================
  
  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer:latest
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_ADMIN_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7053
      - ORDERER_OPERATIONS_LISTENADDRESS=orderer.example.com:9443
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /root
    command: orderer
    volumes:
      - ${CRYPTO_CONFIG_PATH}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
      - ${CRYPTO_CONFIG_PATH}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls:ro
      - orderer.example.com:/var/hyperledger/production/orderer
    ports:
      - "${ORDERER_PORT_EXT}:7050"
      - "${ORDERER_ADMIN_PORT_EXT}:7053"
      - "${ORDERER_OPERATIONS_PORT_EXT}:9443"
    networks:
      - fabric_network

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: hyperledger/fabric-peer:latest
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_CFG_PATH=/etc/hyperledger/fabric
    volumes:
      - ${CRYPTO_CONFIG_PATH}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com:/etc/hyperledger/fabric
      - peer0.org1.example.com:/var/hyperledger/production
      - /var/run/docker.sock:/host/var/run/docker.sock
    working_dir: /root
    command: peer node start
    ports:
      - "${ORG1_PEER0_PORT_EXT}:7051"
      - "${ORG1_PEER0_OPERATIONS_PORT_EXT}:9444"
    networks:
      - fabric_network
      - dokploy-network

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    image: hyperledger/fabric-peer:latest
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_CFG_PATH=/etc/hyperledger/fabric
    volumes:
      - ${CRYPTO_CONFIG_PATH}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com:/etc/hyperledger/fabric
      - peer0.org2.example.com:/var/hyperledger/production
      - /var/run/docker.sock:/host/var/run/docker.sock
    working_dir: /root
    command: peer node start
    ports:
      - "${ORG2_PEER0_PORT_EXT}:9051"
      - "${ORG2_PEER0_OPERATIONS_PORT_EXT}:9445"
    networks:
      - fabric_network
      - dokploy-network

  cli:
    container_name: cli
    image: hyperledger/fabric-tools:latest
    labels:
      service: hyperledger-fabric
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/sh
    volumes:
      - /var/run/:/host/var/run/
      - ${CRYPTO_CONFIG_PATH}/organizations:/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations:ro
      - ./hyperledger-fabric/test-network/scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
      - peer0.org2.example.com
    networks:
      - fabric_network